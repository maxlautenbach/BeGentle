// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entry {
  id Int @id @default(autoincrement())
  name String
}

model User {
  id                    Int      @id @default(autoincrement())
  lastname              String
  firstname             String
  email                 String   @unique
  address               Address?
  password              String
  punkte                Int
  zahlungsinformationen String //tbd
  role                  Role     @default(CUSTOMER)
  rentals               Rental[]
}

model Address{
  id        Int      @id @default(autoincrement())
  street    String
  number    Int
  postCode  Int
  city      String
  user      User @relation(fields: [userId], references: [id])
  userId    Int
}

model Category {
  id              Int      @id @default(autoincrement())
  name            String
  underCategories Category[] @relation("CategoryHierachy")
  overCategoryId  Int?
  overCategory    Category? @relation("CategoryHierachy", fields: [overCategoryId], references: [id])
  instrumentModel InstrumentModel[]
}

model InstrumentModel {
  id                Int      @id @default(autoincrement())
  name              String
  model             String
  priceInMonth      Float
  description       String
  //review            Review[]  kann aus InstrumentObjects aggregiert werden
  instrumentObjects InstrumentObject[]
  instrumentTyp     Category @relation(fields: [instrumentTypId], references: [id])
  instrumentTypId   Int
}

model InstrumentObject {
  id                Int      @id @default(autoincrement())
  currentylRented   Boolean
  model             InstrumentModel @relation(fields: [modelId], references: [id])
  modelId           Int
  rentals           Rental[]
}

model Review {
  id                  Int      @id @default(autoincrement())
  stars               Float
  description         String
  rental              Rental @relation(fields: [rentalId], references: [id])
  rentalId            Int
}

model Rental {
  id                  Int      @id @default(autoincrement())
  instrumentObject    InstrumentObject @relation(fields: [instrumentObjectId], references: [id])
  instrumentObjectId  Int
  user                User @relation(fields: [userId], references: [id])
  userId              Int
  bookedAt            DateTime
  rentalStart         DateTime
  rentalEnd           DateTime
  rentalStatus        RentalStatus
  points              Int
  review              Review?
  damage              Damage?
}

model Damage {
  id                  Int      @id @default(autoincrement())
  description         String
  type                String //vielleicht auch ENUM
  costs               Float
  rental              Rental @relation(fields: [rentalId], references: [id])
  rentalId            Int
}
enum Role {
  CUSTOMER
  WORKER
}

enum RentalStatus {
  BOOKED
  SHIPPED
  DELIVERED
  BACK
  DELAYED
}
