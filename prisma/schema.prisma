// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entry {
  id   Int    @id @default(autoincrement())
  name String
}

model User {
  id                    Int                 @id @default(autoincrement())
  status                UserStatus
  lastActivity          DateTime            @default(now())
  lastname              String?
  firstname             String?
  email                 String?             @unique
  address               Address?
  paymentInformation    PaymentInformation?
  password              String?
  punkte                Int                 @default(0)
  phone                 String?
  role                  Role                @default(CUSTOMER)
  rentals               Rental[]
  shoppingCarts         ShoppingCart[]
  orders                Order[]
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  country String @default("Germany")
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

model PaymentInformation {
  id         Int     @id @default(autoincrement())
  variant    Int
  cardnumber String?
  cardowner  String?
  carddate   String?
  ccv        String?
  user       User    @relation(fields: [userId], references: [id])
  userId     Int     @unique
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  underCategories Category[]        @relation("CategoryHierachy")
  overCategoryId  Int?
  overCategory    Category?         @relation("CategoryHierachy", fields: [overCategoryId], references: [id])
  instrumentModel InstrumentModel[]
}

model InstrumentModel {
  id                Int                @id @default(autoincrement())
  name              String
  model             String
  imageURL          String
  priceInMonth      Float
  description       String[]
  //review            Review[]  kann aus InstrumentObjects aggregiert werden
  instrumentObjects InstrumentObject[]
  instrumentTyp     Category           @relation(fields: [instrumentTypId], references: [id])
  instrumentTypId   Int
  isRecommended     Boolean            @default(false)
  isAvailable       Boolean            @default(true)
  review            Review[]
}

model InstrumentObject {
  id              Int             @id @default(autoincrement())
  currentlyRented Boolean         @default(false)
  model           InstrumentModel @relation(fields: [modelId], references: [id])
  modelId         Int
  rentals         Rental[]
}

model ShoppingCart {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  rentals      Rental[]
  createdAt    DateTime @default(now())
  rentalPrice  Float    @default(0.00)
  shippingFee  Float    @default(4.99)
  extraFee     Float    @default(0.00)
  totalPrice   Float    @default(4.99)
  monthlyPrice Float    @default(0.00)
}

model Order {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  rentals      Rental[]
  createdAt    DateTime @default(now())
  rentalPrice  Float    @default(0.00)
  shippingFee  Float    @default(4.99)
  extraFee     Float    @default(0.00)
  totalPrice   Float    @default(4.99)
  monthlyPrice Float    @default(0.00)
}

model Review {
  id                    Int    @id @default(autoincrement())
  stars                 Float
  description           String?
  instrumentModel       InstrumentModel? @relation(fields: [instrumentModelId], references: [id])
  instrumentModelId     Int?    @unique
}

model Rental {
  id                 Int              @id @default(autoincrement())
  instrumentObject   InstrumentObject @relation(fields: [instrumentObjectId], references: [id])
  instrumentObjectId Int
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  duration           Int
  bookedAt           DateTime?
  rentalStart        DateTime?
  rentalEnd          DateTime?
  rentalStatus       RentalStatus @default(DELIVERED)
  points             Int?
  damage             Damage?
  shoppingCart       ShoppingCart?    @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId     Int?
  order              Order?           @relation(fields: [orderId], references: [id])
  orderId            Int?
  price              Float
}

model Damage {
  id          Int    @id @default(autoincrement())
  description String
  type        String //vielleicht auch ENUM
  costs       Float
  rental      Rental @relation(fields: [rentalId], references: [id])
  rentalId    Int    @unique
}

enum Role {
  CUSTOMER
  WORKER
}

enum RentalStatus {
  RESERVED
  BOOKED
  SHIPPED
  DELIVERED
  BACK
  DELAYED
}

enum UserStatus {
  TEMP
  ACTIVE
}
